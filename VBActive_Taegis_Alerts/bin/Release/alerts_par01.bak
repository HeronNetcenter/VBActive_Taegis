# ALERTS - RECUPERA OS ALERTAS DO DIA SELECIONADO POR PARAMETRO EXTERNO
""" 
AUTOR: HERON JR
DATA:  24/01/23
ALT:   20/03/23
ALT:   31/03/23 - Parâmetros de seleção de cliente
ALT:   11/12/23 - Inclusão do campo ddata19 - Tactics & Technique Id (Enrichment Details)

US2: https://api.delta.taegis.secureworks.com
Tenant Id: 137287
Tenant Name: Netcenter - Production
client_id: SGDErpvNZHWbG5hhRVTQ1uJ3Tl8TExMg
client_secret: ZVvI3BUTRlpgkjs9D9e4wgex9T6_FcZrmVzUVYMJIwJnx9LjzRIqb5hJwtyVRZxx
 """

# Setup dependencies
from oauthlib.oauth2 import BackendApplicationClient
from requests_oauthlib import OAuth2Session
import json
import os
import argparse

# DEFINIÇÃO DOS PARÂMETROS EXTERNOS
# pData1: data para a extração dos alertas a partir da zero hora
# pData2: data do dia seguinte à zero hora para limitar a extração em 24 horas
# pClientName: Nome do cliente
# pTenantId: Tenant ID do cliente
# O processo será automatizado pelo programa VB.Net de chamada que calculará a data do dia seguinte a partir da data informada como parâmetro.
parser = argparse.ArgumentParser()
parser.add_argument('pData1')
parser.add_argument('pData2')
parser.add_argument('pTenantId')
parser.add_argument('pClientId')
parser.add_argument('pClientSecret')
args = parser.parse_args()

API_ENDPOINT='https://api.delta.taegis.secureworks.com'
TENANT_ID = args.pTenantId          # '137287'
CLIENT_ID = args.pClientId          # 'SGDErpvNZHWbG5hhRVTQ1uJ3Tl8TExMg'
CLIENT_SECRET = args.pClientSecret  # 'ZVvI3BUTRlpgkjs9D9e4wgex9T6_FcZrmVzUVYMJIwJnx9LjzRIqb5hJwtyVRZxx'
 
 # Fetch and test client credentials
client = BackendApplicationClient(client_id=CLIENT_ID)
oauth_client = OAuth2Session(client=client)
token = oauth_client.fetch_token(token_url=f'{API_ENDPOINT}/auth/api/v2/auth/token', client_id=CLIENT_ID, client_secret=CLIENT_SECRET)

# testing access
r = oauth_client.get(f"{API_ENDPOINT}/assets/version")
print(r.content)

# Search Alerts.
alertsQuery = """
query ($searchRequestInput: SearchRequestInput)
{
  alertsServiceSearch(in: $searchRequestInput) {
    status
    reason
    alerts {
      list {
        enrichment_details {
          mitre_attack_info {
            tactics
            technique_id
          }
        }
        id
        tenant_id
        status
        suppressed
        suppression_rules {
          id
          version
        }
        resolution_reason
        attack_technique_ids
        entities{
          entities
          relationships{
            from_entity
            relationship
            to_entity
          }
        }
        metadata {
          engine {
            name
          }
          creator {
            detector {
              version
              detector_id
            }
            rule {
              rule_id
              version
            }
          }
          title
          description
          confidence
          severity
          created_at {
            seconds
          }
        }
        investigation_ids {
          id
        }
        sensor_types
      }
      total_results
    }
  }
}
"""

auth = "Bearer " + token['access_token']

# Parâmetros originais
# params = {
#     "searchRequestInput": {
#         "cql_query": "from alert severity >= 0.7 and status='OPEN' EARLIEST='2022-05-02T16:09:11.012Z' AND LATEST='2022-05-03T16:09:11.012Z'",
#         "limit": 1
#     }
# }

# Parâmetros Fixos
# params = {
#     "searchRequestInput": {
#         "cql_query": "EARLIEST='2023-01-24T00:00:00.000Z' AND LATEST='2023-01-25T00:00:00.000Z'",
#         "limit": 10000
#     }
# }

# Parâmetros para o dia anterior (24 horas)
# from datetime import datetime, timedelta
# yesterday = datetime.now() - timedelta(days=1)

print("EARLIEST= '" + args.pData1 + 'T00:00:00.000Z' + "' AND LATEST= '" + args.pData2 + 'T00:00:00.000Z' + "'")
params = {
    "searchRequestInput": {
        "cql_query": "EARLIEST= '" + args.pData1 + 'T00:00:00.000Z' + "' AND LATEST= '" + args.pData2 + 'T00:00:00.000Z' + "'",
        "limit": 10000
    }
}

# print(yesterday('%Y-%m-%d') + 'T00:00:00.000Z')
# print(datetime.now()('%Y-%m-%d') + 'T00:00:00.000Z')

r = oauth_client.post(f'{API_ENDPOINT}/graphql', json={
        "query": alertsQuery,
        "variables": params,
    }, headers={"X-Tenant-Context": TENANT_ID, "Authorization" : auth})

# We can now decode the response and print it out
result = json.loads(r.content)

print(json.dumps(result, indent=4))
arquivo = open('alerts01_' + args.pTenantId + '_' + args.pData1.replace('-','') + '.json', 'w')
arquivo.write(json.dumps(result, indent=4))
arquivo.close()